// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/cf-redis-broker/redis"
)

type FakeAgentClient struct {
	CredentialsStub        func(string) (redis.Credentials, error)
	credentialsMutex       sync.RWMutex
	credentialsArgsForCall []struct {
		arg1 string
	}
	credentialsReturns struct {
		result1 redis.Credentials
		result2 error
	}
	credentialsReturnsOnCall map[int]struct {
		result1 redis.Credentials
		result2 error
	}
	ResetStub        func(string) error
	resetMutex       sync.RWMutex
	resetArgsForCall []struct {
		arg1 string
	}
	resetReturns struct {
		result1 error
	}
	resetReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAgentClient) Credentials(arg1 string) (redis.Credentials, error) {
	fake.credentialsMutex.Lock()
	ret, specificReturn := fake.credentialsReturnsOnCall[len(fake.credentialsArgsForCall)]
	fake.credentialsArgsForCall = append(fake.credentialsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Credentials", []interface{}{arg1})
	fake.credentialsMutex.Unlock()
	if fake.CredentialsStub != nil {
		return fake.CredentialsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.credentialsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAgentClient) CredentialsCallCount() int {
	fake.credentialsMutex.RLock()
	defer fake.credentialsMutex.RUnlock()
	return len(fake.credentialsArgsForCall)
}

func (fake *FakeAgentClient) CredentialsCalls(stub func(string) (redis.Credentials, error)) {
	fake.credentialsMutex.Lock()
	defer fake.credentialsMutex.Unlock()
	fake.CredentialsStub = stub
}

func (fake *FakeAgentClient) CredentialsArgsForCall(i int) string {
	fake.credentialsMutex.RLock()
	defer fake.credentialsMutex.RUnlock()
	argsForCall := fake.credentialsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentClient) CredentialsReturns(result1 redis.Credentials, result2 error) {
	fake.credentialsMutex.Lock()
	defer fake.credentialsMutex.Unlock()
	fake.CredentialsStub = nil
	fake.credentialsReturns = struct {
		result1 redis.Credentials
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentClient) CredentialsReturnsOnCall(i int, result1 redis.Credentials, result2 error) {
	fake.credentialsMutex.Lock()
	defer fake.credentialsMutex.Unlock()
	fake.CredentialsStub = nil
	if fake.credentialsReturnsOnCall == nil {
		fake.credentialsReturnsOnCall = make(map[int]struct {
			result1 redis.Credentials
			result2 error
		})
	}
	fake.credentialsReturnsOnCall[i] = struct {
		result1 redis.Credentials
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentClient) Reset(arg1 string) error {
	fake.resetMutex.Lock()
	ret, specificReturn := fake.resetReturnsOnCall[len(fake.resetArgsForCall)]
	fake.resetArgsForCall = append(fake.resetArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Reset", []interface{}{arg1})
	fake.resetMutex.Unlock()
	if fake.ResetStub != nil {
		return fake.ResetStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.resetReturns
	return fakeReturns.result1
}

func (fake *FakeAgentClient) ResetCallCount() int {
	fake.resetMutex.RLock()
	defer fake.resetMutex.RUnlock()
	return len(fake.resetArgsForCall)
}

func (fake *FakeAgentClient) ResetCalls(stub func(string) error) {
	fake.resetMutex.Lock()
	defer fake.resetMutex.Unlock()
	fake.ResetStub = stub
}

func (fake *FakeAgentClient) ResetArgsForCall(i int) string {
	fake.resetMutex.RLock()
	defer fake.resetMutex.RUnlock()
	argsForCall := fake.resetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentClient) ResetReturns(result1 error) {
	fake.resetMutex.Lock()
	defer fake.resetMutex.Unlock()
	fake.ResetStub = nil
	fake.resetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgentClient) ResetReturnsOnCall(i int, result1 error) {
	fake.resetMutex.Lock()
	defer fake.resetMutex.Unlock()
	fake.ResetStub = nil
	if fake.resetReturnsOnCall == nil {
		fake.resetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.resetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgentClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.credentialsMutex.RLock()
	defer fake.credentialsMutex.RUnlock()
	fake.resetMutex.RLock()
	defer fake.resetMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAgentClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ redis.AgentClient = new(FakeAgentClient)

// This file was generated by counterfeiter
package fake

import (
	"sync"

	"github.com/pivotal-cf/cf-redis-broker/consistency"
)

type Keycounter struct {
	KeycountStub        func(host string) (int, error)
	keycountMutex       sync.RWMutex
	keycountArgsForCall []struct {
		host string
	}
	keycountReturns struct {
		result1 int
		result2 error
	}
}

func (fake *Keycounter) Keycount(host string) (int, error) {
	fake.keycountMutex.Lock()
	fake.keycountArgsForCall = append(fake.keycountArgsForCall, struct {
		host string
	}{host})
	fake.keycountMutex.Unlock()
	if fake.KeycountStub != nil {
		return fake.KeycountStub(host)
	} else {
		return fake.keycountReturns.result1, fake.keycountReturns.result2
	}
}

func (fake *Keycounter) KeycountCallCount() int {
	fake.keycountMutex.RLock()
	defer fake.keycountMutex.RUnlock()
	return len(fake.keycountArgsForCall)
}

func (fake *Keycounter) KeycountArgsForCall(i int) string {
	fake.keycountMutex.RLock()
	defer fake.keycountMutex.RUnlock()
	return fake.keycountArgsForCall[i].host
}

func (fake *Keycounter) KeycountReturns(result1 int, result2 error) {
	fake.KeycountStub = nil
	fake.keycountReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

var _ consistency.Keycounter = new(Keycounter)

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/cf-redis-broker/redis"
)

type FakeProcessChecker struct {
	AliveStub        func(int) bool
	aliveMutex       sync.RWMutex
	aliveArgsForCall []struct {
		arg1 int
	}
	aliveReturns struct {
		result1 bool
	}
	aliveReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProcessChecker) Alive(arg1 int) bool {
	fake.aliveMutex.Lock()
	ret, specificReturn := fake.aliveReturnsOnCall[len(fake.aliveArgsForCall)]
	fake.aliveArgsForCall = append(fake.aliveArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("Alive", []interface{}{arg1})
	fake.aliveMutex.Unlock()
	if fake.AliveStub != nil {
		return fake.AliveStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.aliveReturns
	return fakeReturns.result1
}

func (fake *FakeProcessChecker) AliveCallCount() int {
	fake.aliveMutex.RLock()
	defer fake.aliveMutex.RUnlock()
	return len(fake.aliveArgsForCall)
}

func (fake *FakeProcessChecker) AliveCalls(stub func(int) bool) {
	fake.aliveMutex.Lock()
	defer fake.aliveMutex.Unlock()
	fake.AliveStub = stub
}

func (fake *FakeProcessChecker) AliveArgsForCall(i int) int {
	fake.aliveMutex.RLock()
	defer fake.aliveMutex.RUnlock()
	argsForCall := fake.aliveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeProcessChecker) AliveReturns(result1 bool) {
	fake.aliveMutex.Lock()
	defer fake.aliveMutex.Unlock()
	fake.AliveStub = nil
	fake.aliveReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeProcessChecker) AliveReturnsOnCall(i int, result1 bool) {
	fake.aliveMutex.Lock()
	defer fake.aliveMutex.Unlock()
	fake.AliveStub = nil
	if fake.aliveReturnsOnCall == nil {
		fake.aliveReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.aliveReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeProcessChecker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.aliveMutex.RLock()
	defer fake.aliveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProcessChecker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ redis.ProcessChecker = new(FakeProcessChecker)
